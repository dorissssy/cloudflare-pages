{"ast":null,"code":"var _jsxFileName = \"/Users/yangyuxin/Documents/cloudflare/cloudflare-pages/src/Traffic.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LineChart from \"./components/LineChart\";\nimport BarChart from \"./components/BarChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Traffic() {\n  _s();\n  // const Posts = () => {\n  const [traffic, setTraffic] = useState([]);\n  useEffect(() => {\n    const getTraffic = async () => {\n      const resp = await fetch('https://project-1.yangyuxin0714.workers.dev/traffic-change');\n      const trafficResp = await resp.json();\n      // console.log(postsResp)\n\n      setTraffic(trafficResp);\n    };\n    getTraffic();\n  }, []);\n  console.log(traffic);\n\n  // const [trafficData, setTrafficData] = useState({\n  //   labels: traffic.map(post => \n  //     // post.rankingEntry[0].domain),\n  //   {\n  //     if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n  //         return post[\"meta\"][\"timestamp\"]\n  //     }\n  //   }),\n\n  //   datasets: [\n  //     {\n  //       label: \"Traffic\",\n  //       data: traffic.map(post => \n  //         // post.rankingEntry[0].domain),\n  //       {\n  //         if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n  //             return post[\"data\"][\"total\"]\n  //         }\n  //       }),\n  //     }\n  //   ]\n\n  // })\n\n  // useEffect(() => {\n  //   // const getPosts = async () => {\n  //     const obj = {\n  //         labels: traffic.map(post => \n  //             // post.rankingEntry[0].domain),\n  //           {\n  //             if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n  //                 return post[\"meta\"][\"timestamp\"]\n  //             }\n  //           }),\n\n  //           datasets: [\n  //             {\n  //               label: \"Traffic\",\n  //               data: traffic.map(post => \n  //                 // post.rankingEntry[0].domain),\n  //               {\n  //                 if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n  //                     return post[\"data\"][\"total\"]\n  //                 }\n  //               }),\n  //             }\n  //           ]\n\n  //     }\n  //     // console.log(postsResp)\n  //     setTrafficData(obj);\n  //   // };\n\n  // }, [traffic]);\n\n  const [trafficData, setTrafficData] = useState({\n    labels: traffic.filter(post =>\n    // post.rankingEntry[0].domain),\n    {\n      if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n        return true;\n      }\n      return false;\n    }).map(post => post[\"meta\"][\"timestamp\"]),\n    datasets: [{\n      label: \"Total Traffic\",\n      data: traffic.filter(post =>\n      // post.rankingEntry[0].domain),\n      {\n        if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n          return true;\n        }\n        return false;\n      }).map(post => post[\"data\"][\"total\"])\n    }, {\n      label: \"Http Traffic\",\n      data: traffic.filter(post =>\n      // post.rankingEntry[0].domain),\n      {\n        if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n          return true;\n        }\n        return false;\n      }).map(post => post[\"data\"][\"http\"])\n    }]\n  });\n  useEffect(() => {\n    // const getPosts = async () => {\n    const obj = {\n      labels: traffic.filter(post =>\n      // post.rankingEntry[0].domain),\n      {\n        if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n          return true;\n        }\n        return false;\n      }).map(post => post[\"meta\"][\"timestamp\"]),\n      datasets: [{\n        label: \"Total Traffic\",\n        data: traffic.filter(post =>\n        // post.rankingEntry[0].domain),\n        {\n          if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n            return true;\n          }\n          return false;\n        }).map(post => post[\"data\"][\"total\"])\n      }, {\n        label: \"Http Traffic\",\n        data: traffic.filter(post =>\n        // post.rankingEntry[0].domain),\n        {\n          if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n            return true;\n          }\n          return false;\n        }).map(post => post[\"data\"][\"http\"])\n      }]\n    };\n    // console.log(postsResp)\n    setTrafficData(obj);\n    // };\n  }, [traffic]);\n  // console.log(trafficData)\n\n  const [metaData, setMetaData] = useState([1, 2, 3]);\n  useEffect(() => {\n    const obj = traffic.filter(post => !post[\"meta\"].hasOwnProperty(\"timestamp\")).map(post => post[\"meta\"]);\n    setMetaData(obj);\n  }, [traffic]);\n  // console.log(metaData)\n  // Object.entries(metaData).map(([key, value]) => {\n  //     Object.entries(value).map(([key, value]) => {\n  //         console.log(key, value)\n  //     })\n  // })\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Current Traffic Change Over 30 Days\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n        chartData: trafficData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 5,\n          textAlign: 'left',\n          width: 400,\n          color: '#b2b2b2'\n        },\n        children: Object.entries(metaData).map(_ref => {\n          let [key, value] = _ref;\n          return Object.entries(value).map(_ref2 => {\n            let [k, v] = _ref2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [k.split('/')[k.split('/').length - 1], \": \", v]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 9\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n_s(Traffic, \"wBEst3hRZbheCNV9p09ZroEIstM=\");\n_c = Traffic;\nexport default Traffic;\nvar _c;\n$RefreshReg$(_c, \"Traffic\");","map":{"version":3,"names":["React","useEffect","useState","logo","LineChart","BarChart","Traffic","traffic","setTraffic","getTraffic","resp","fetch","trafficResp","json","console","log","trafficData","setTrafficData","labels","filter","post","hasOwnProperty","map","datasets","label","data","obj","metaData","setMetaData","width","fontSize","textAlign","color","Object","entries","key","value","k","v","split","length"],"sources":["/Users/yangyuxin/Documents/cloudflare/cloudflare-pages/src/Traffic.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LineChart from \"./components/LineChart\";\nimport  BarChart  from \"./components/BarChart\";\n\nfunction Traffic() {\n  // const Posts = () => {\n    const [traffic, setTraffic] = useState([]);\n    \n    useEffect(() => {\n      const getTraffic = async () => {\n        const resp = await fetch('https://project-1.yangyuxin0714.workers.dev/traffic-change');\n        const trafficResp = await resp.json();\n        // console.log(postsResp)\n\n        setTraffic(trafficResp);\n      };\n    \n      getTraffic();\n    }, []);\n    console.log(traffic)\n\n\n    // const [trafficData, setTrafficData] = useState({\n    //   labels: traffic.map(post => \n    //     // post.rankingEntry[0].domain),\n    //   {\n    //     if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n    //         return post[\"meta\"][\"timestamp\"]\n    //     }\n    //   }),\n      \n    //   datasets: [\n    //     {\n    //       label: \"Traffic\",\n    //       data: traffic.map(post => \n    //         // post.rankingEntry[0].domain),\n    //       {\n    //         if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n    //             return post[\"data\"][\"total\"]\n    //         }\n    //       }),\n    //     }\n    //   ]\n\n    // })\n\n    // useEffect(() => {\n    //   // const getPosts = async () => {\n    //     const obj = {\n    //         labels: traffic.map(post => \n    //             // post.rankingEntry[0].domain),\n    //           {\n    //             if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n    //                 return post[\"meta\"][\"timestamp\"]\n    //             }\n    //           }),\n              \n    //           datasets: [\n    //             {\n    //               label: \"Traffic\",\n    //               data: traffic.map(post => \n    //                 // post.rankingEntry[0].domain),\n    //               {\n    //                 if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n    //                     return post[\"data\"][\"total\"]\n    //                 }\n    //               }),\n    //             }\n    //           ]\n          \n    //     }\n    //     // console.log(postsResp)\n    //     setTrafficData(obj);\n    //   // };\n    \n    // }, [traffic]);\n\n    const [trafficData, setTrafficData] = useState({\n        labels: traffic.filter(post => \n          // post.rankingEntry[0].domain),\n        {\n          if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n              return true\n          }\n          return false\n        }).map(post => post[\"meta\"][\"timestamp\"]),\n        \n        datasets: [\n          {\n            label: \"Total Traffic\",\n            data: traffic.filter(post => \n              // post.rankingEntry[0].domain),\n            {\n                if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n                    return true\n                }\n                return false\n            }).map(post => post[\"data\"][\"total\"]),\n          },\n          {\n            label: \"Http Traffic\",\n            data: traffic.filter(post => \n              // post.rankingEntry[0].domain),\n            {\n                if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n                    return true\n                }\n                return false\n            }).map(post => post[\"data\"][\"http\"]),\n          }\n        ]\n  \n      })\n  \n      useEffect(() => {\n        // const getPosts = async () => {\n          const obj = {\n            labels: traffic.filter(post => \n                // post.rankingEntry[0].domain),\n              {\n                if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n                    return true\n                }\n                return false\n              }).map(post => post[\"meta\"][\"timestamp\"]),\n              \n              datasets: [\n                {\n                  label: \"Total Traffic\",\n                  data: traffic.filter(post => \n                    // post.rankingEntry[0].domain),\n                  {\n                      if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n                          return true\n                      }\n                      return false\n                  }).map(post => post[\"data\"][\"total\"]),\n                },\n                {\n                    label: \"Http Traffic\",\n                    data: traffic.filter(post => \n                      // post.rankingEntry[0].domain),\n                    {\n                        if (post[\"meta\"].hasOwnProperty(\"timestamp\")) {\n                            return true\n                        }\n                        return false\n                    }).map(post => post[\"data\"][\"http\"]),\n                  }\n              ]\n            \n          }\n          // console.log(postsResp)\n          setTrafficData(obj);\n        // };\n      \n      }, [traffic]);\n    // console.log(trafficData)\n    \n\n    const [metaData, setMetaData] = useState([1,2,3])\n    useEffect(() => {\n        const obj = traffic.filter(post=> !post[\"meta\"].hasOwnProperty(\"timestamp\")).map(post => post[\"meta\"])\n        setMetaData(obj)\n    }, [traffic])\n    // console.log(metaData)\n    // Object.entries(metaData).map(([key, value]) => {\n    //     Object.entries(value).map(([key, value]) => {\n    //         console.log(key, value)\n    //     })\n    // })\n  return (\n    <div className=\"App\">\n      <div style={{ width: 1000 }}>\n        <h1>Current Traffic Change Over 30 Days</h1>\n        <LineChart chartData={trafficData}/>\n        <div style={{fontSize:5, textAlign:'left', width:400, color:'#b2b2b2'}}>{Object.entries(metaData).map(([key, value]) => \n         Object.entries(value).map(([k, v]) => \n        <div>{k.split('/')[k.split('/').length-1]}: {v}</div>))}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Traffic;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}